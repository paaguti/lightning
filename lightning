#!/bin/bash

###############################################################################################
##                                                                                           ##
##                       Universidad Carlos III de Madrid (UC3M)                             ##
##                                                                                           ##
##    Lightning - The simple and lightweight network simulator based on Docker containers    ##
##                                                                                           ##
##    author:         Pablo Toribio (under supervision of professor C.J. Bernardos Cano)     ##
##                                                                                           ##
##    project site:   https://github.com/ptoribi/lightning                                   ##
##                                                                                           ##
##    file description:  main program file -> displays menu, starts selected scenario,       ##
##                       stops already launched scenario or purges the system                ##
##                                                                                           ##
##    usage:             not to be used directly, but summoned by "lightning-launcher" file  ##
##                                                                                           ##
###############################################################################################

#echo "lightning --> logname: $(logname)"
#echo "lightning --> whoami:  $(whoami)"

# ptoribi: "which" will find in the path the full location of the executable, "readlink -f" will resolve all possible symbolic links and "dirname" will remove the last component (file name).
LIGHTNING_INSTALLATION_PATH=$(dirname $(readlink -f $(which lightning)))
source $LIGHTNING_INSTALLATION_PATH/functions
source $LIGHTNING_INSTALLATION_PATH/personalized_functions

#echo $USER_BEHIND_SUDO:$GROUP_OF_USER_BEHIND_SUDO is executing Lightning, please enjoy!

#paaguti: add a flag to enable/disable remote launching
while getopts ":hR:" opt; do
    case $opt in
        h|\?)
            help $
            if [ "$opt" == "h"]; then
                usage_message
            fi
            return 1
            ;;
        R)
            # Delete the old value for REMOTE if is exists
            sed -i '/REMOTE/d' $LIGHTNING_INSTALLATION_PATH/variables.conf
            # Add the new value at the end of the variable.conf file for future use
            printf 'REMOTE=%d\n' $OPTARG >> $LIGHTNING_INSTALLATION_PATH/variables.conf
            # Reload the configuration
            source $LIGHTNING_INSTALLATION_PATH/variables.conf
            ;;
    esac
done
shift $((OPTIND - 1))

# ptoribi: create folder for storing the logs
mkdir -p $LOGS_LOCATION

if [ "$#" -eq 0 ]
then
  # Display header showing version number
  version_header
  # Display usage message
  usage_message
else
  # Stop
  if [ "$#" -eq 1 ] && [ $1 == "stop" ]
  then
    lightning_stop
    # ptoribi: I remove the root from the list of local users allowed to make connections to the X server
    [ $REMOTE -eq 0 ] && xhost -SI:localuser:root >> /dev/null
  # Purge
  elif [ "$#" -eq 1 ] && [ $1 == "purge" ]
  then
    lightning_purge
  # Start
  elif [ "$#" -eq 2 ] && [ $1 == "start" ]
  then
    if [[ -e $CONTAINERS_CREATED_FILE || -e $NETWORKS_CREATED_FILE ]] && [[ -e $SCENARIOS_PATH/$2 || -e $SCENARIOS_PATH/$2.xml || -e $SCENARIOS_PATH_LOCAL/$2 || -e $SCENARIOS_PATH_LOCAL/$2.xml ]]
    then
      error_message "Another user was running lightning or it wasn't properly closed the last time it was executed"
      information_message "Purging the system..."
      lightning_purge
      if [ $? == 0 ]
      then
          information_message "Launching selected scenario..."
      else
          error_message "Failed purging the system..."
          return
      fi
    fi
    # ptoribi: execute scenario and show related .pdf file if present in "scenarios"
    # paaguti: start with the .XML scenarios (supported by REMOTE mode)
    # paaguti: try to find the scanrio file in the local scenarios first and then in the global scenarios
    XML_FILE=$(get_scenario_fullname $2.xml)
    SCRIPT_FILE=$(get_scenario_fullname $2)
    if [ -n "$XML_FILE" ]; then

      # ptoribi: I add the root to the list of local users allowed to make connections to the X server
      [ $REMOTE -ne 1 ] && xhost +SI:localuser:root >> /dev/null

      # moved to read_xml
      # if [ -e $SCENARIOS_PATH/$2.pdf ]
      # then
      #   evince $SCENARIOS_PATH/$2.pdf 2>/dev/null &
      # fi

      # if [ -e $SCENARIOS_PATH/$2.xml ]
      # then
      # --- LAUNCHING SELECTED SCENARIO, XML PARSING ---
      # ptoribi: time will measure how much time takes the commmand to complete
      time read_xml $XML_FILE
      echo ""
    elif [ -n "$SCENARIO_FILE" ]; then
        if [ $REMOTE -eq 1 ]; then
            error_message "REMOTE scenarios not supported (yet) by Lightning (TODO)"
            return
        fi
        [ -e $SCENARIO_FILE.pdf ] && evince $SCENARIO_FILE.pdf 2>/dev/null &

        # --- LAUNCHING SELECTED SCENARIO, DIRECT FUNCTIONS EXECUTION ---
        # ptoribi: time will measure how much time the commmand takes to complete
        time $SCENARIO_FILE
        echo ""
    else
      # Display usage message
      echo ""
      error_message "Scenario $2 not found"
      usage_message
    fi
	# newtty
  elif [ "$#" -eq 2 ] && [ $1 == "newtty" ]
  then
		new_tty $2
  # Update
  elif [ "$#" -eq 1 ] && [ $1 == "update" ]
  then
    $LIGHTNING_INSTALLATION_PATH/update
  else
    echo ""
    error_message "Command not recognized"
    usage_message
  fi
fi
